## @section Common parameters

## @param kubeVersion Override Kubernetes version
##
kubeVersion:
## @param nameOverride String to partially override names.fullname
##
nameOverride:
## @param fullnameOverride String to fully override names.fullname
##
fullnameOverride:
## @param commonLabels Labels to add to all deployed objects
##
commonLabels: {}


## @section One-Time Secret configuration

configuration:
  ## @param {string} configuration.host - Host/domain for accessing the website
  ##
  host: "localhost"
  ## @param {boolean} configuration.ssl - Enable/disable SSL support
  ##
  ssl: true
  ## @param {string} configuration.redisUrl - Base Redis URL to be used
  ## ("?timeout=10&thread_safe=false&logging=false" will be appended)
  ##
  redisUrl: redis://redis:6379/0
  ## @param {string} configuration.colonels - One-Time Secret admin accounts, separated by commas
  ## e.g.:
  ## colonels: "admin@example.com,user@example.com"
  ##
  colonels: ""
  ## @param {string} configuration.secret - One-Time Secret encryption secret
  ## NOTE: once the secret is set, do not change it
  ## (keep a reference to it somewhere, like in a password manager)
  ##
  secret: CHANGEME

  emailer:
    ## @param {boolean} configuration.emailer.sendgridEnabled - Enable/disable SendGrid emailing
    ##
    sendgridEnabled: false
    ## @param {boolean} configuration.emailer.smtpEnabled - Enable/disable SMTP emailing
    ##
    smtpEnabled: false
    ## @param {string} configuration.emailer.from - Sender "from" email address
    ## Applies to both SendGrid and SMTP emailng
    ## Defaults to "CHANGEME@example.com" if not set
    ##
    from: ""
    ## @param {string} configuration.emailer.sendgridAccount - SendGrid account/user
    ##
    sendgridAccount: CHANGEME
    ## @param {string} configuration.emailer.sendgridPassword - SendGrid account password
    ##
    sendgridPassword: CHANGEME
    ## @param {string} configuration.emailer.sendgridFromName - SendGrid sender "from" name
    ##
    sendgridFromName: CHANGEME
    ## @param {string} configuration.emailer.sendgridBcc - SendGrid BCC email address
    ##
    sendgridBcc:
    ## @param {string} configuration.emailer.smtpHost - SMTP server host
    ##
    smtpHost: localhost
    ## @param {integer} configuration.emailer.smtpPort - SMTP server port
    ##
    smtpPort: 587
    ## @param {boolean} configuration.emailer.smtpTls - Enable/disable TLS
    ##
    smtpTls: false
    ## @param {string} configuration.emailer.smtpUser - SMTP server user
    ##
    smtpUser:
    ## @param {string} configuration.emailer.smtpPass - SMTP server password
    ##
    smtpPass:
    ## @param {string} configuration.emailer.smtpAuth - SMTP authentication method
    ## Use plain for Google/Gmail. Defaults to plain, if not set.
    ##
    smtpAuth:

  incoming:
    ## @param {boolean} configuration.incoming.enabled - Enable/disable the "Incoming" feature
    ## See https://onetimesecret.com/incoming to see how it functions
    ##
    enabled: false
    ## @param {string} configuration.incoming.email - Receiving email address
    ##
    email:
    ## @param {string} configuration.incoming.passphrase - Passphrase of the "secret" link being sent to the email
    ##
    passphrase: CHANGEME
    ## @param {string} configuration.incoming.regex - Regex to ensure the "ticket number" is valid
    ##
    regex: '\A[a-zA-Z0-9]{6}\z'


## @section Image parameters

## One-Time Secret image
## @param {string} image.registry - One-Time Secret image registry
## @param {string} image.repository - One-Time Secret image repository
## @param {string} image.tag - One-Time Secret image tag (immutable tags are recommended)
## @param {string} image.pullPolicy - One-Time Secret image pull policy
##
image:
  ## OPTION 1: You can set the entire image repository in one line below
  repository: gcr.io/indiegogo-public/onetimesecret:latest
  ## OPTION 2: You can manage a registry with
  # registry: gcr.io
  # repository: indiegogo-public/onetimesecret

  ## Override the image tag to deploy by setting this variable.
  ## If no value is set, the chart's appVersion will be used.
  # tag: 'latest'

  pullPolicy: IfNotPresent


## @section Deployment parameters

## @param {integer} replicaCount - Number of One-Time Secret deployment replicas
##
replicaCount: 1
## @param {string} strategy.type - Deployment strategy type
## @param {Object} strategy.rollingUpdate
## ref: https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#strategy
##
strategy:
  ## StrategyType
  ## Can be set to RollingUpdate or Recreate
  ##
  type: RollingUpdate
  rollingUpdate: {}
## Resource requests and limits
## ref: http://kubernetes.io/docs/user-guide/compute-resources/
## @param {Object} resources.limits - The resources limits for the One-Time Secret container
## @param {Object} resources.requests - The requested resources for the One-Time Secret container
##
resources:
  requests: {}
  limits: {}
## One-Time Secret container liveness and readiness probes
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes
## @param {boolean} livenessProbe.enabled - Enable/disable livenessProbe on One-Time Secret container
## @param {integer} livenessProbe.port - Set port for the TCP socket livenessProbe (overrides `networkPort`)
## @param {integer} livenessProbe.initialDelaySeconds - Initial delay seconds for livenessProbe
## @param {integer} livenessProbe.periodSeconds - Period seconds for livenessProbe
## @param {integer} livenessProbe.timeoutSeconds - Timeout seconds for livenessProbe
## @param {integer} livenessProbe.successThreshold - Success threshold for livenessProbe
## @param {integer} livenessProbe.failureThreshold - Failure threshold for livenessProbe
##
livenessProbe:
  enabled: true
  port:
  initialDelaySeconds: 30
  periodSeconds:
  timeoutSeconds:
  successThreshold:
  failureThreshold:
## @param {Object} customLivenessProbe - Custom livenessProbe that overrides the default one
##
customLivenessProbe: {}
## @param {boolean} readinessProbeEnabled - Enable/disable the readinessProbe
##
readinessProbeEnabled: false
## @param {Object} readinessProbe - Set a readinessProbe
##
readinessProbe: {}


## @section Network/service related parameters

## @param {integer} networkPort - Set the port to be used across the OTS container, livenessProbe, service, and ingress
##
networkPort: 3000
## @param {integer} containerPort - Override the default port (`networkPort`) used in the container
##
containerPort:
## Service parameters
## ref: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
## @param {integer} service.port - Override the default port (`networkPort`) used in the service
## @param {string} service.type - Set the service type
##
service:
  port:
  ## ServiceType
  ## Can be set to ClusterIP, NodePort, LoadBalancer, or ExternalName
  ##
  type: NodePort


## @section Ingress parameters
## ref: https://kubernetes.io/docs/concepts/services-networking/ingress/

ingress:
  ## @param {boolean} ingress.enabled - Enable/disable the ingress
  ##
  enabled: true
  tls:
    ## @param {boolean} ingress.tls.enabled - Enable/disable ingress TLS support
    ##
    enabled: true
    ## @param {string} ingress.tls.hosts - TLS host(s), separated by commas
    ##
    hosts:
    ## @param {string} ingress.tls.secretName - Name of the Kubernetes secret to store the TLS certificate
    ## Defaults to the value of `configuration.host` and '-tls' is appended to the end
    ##
    secretName:
  ## Ingress rule
  ## ref: https://kubernetes.io/docs/concepts/services-networking/ingress/#ingress-rules
  rules:
    ## @param {string} ingress.rules.host - Name of the Kubernetes secret to store the TLS certificate
    ## Defaults to the value of `configuration.host`
    ##
    host:
    ## @param {string} ingress.rules.path - A path which has an associated backendName
    ## Defaults to "/"
    ##
    path:
    ## @param {string} ingress.rules.pathType - The type of path as expressed in the reference below
    ## ref: https://kubernetes.io/docs/concepts/services-networking/ingress/#path-types
    ## Defaults to "Exact"
    ##
    pathType:
    ## @param {string} ingress.rules.serviceName - The backend service name
    ## Defaults to the Chart name, unless `fullnameOverride` or `nameOverride` is set
    ##
    serviceName:
    ## @param {string} ingress.rules.servicePort - The backend service port
    ## Defaults to the value of `networkPort`
    ##
    servicePort:
  ## Custom Ingress rules (overrides the default `ingress.rules`)
  ## @param {List} ingress.customRules - Custom Ingress rules
  ## ref: https://kubernetes.io/docs/concepts/services-networking/ingress/#ingress-rules
  ## If you do want to specify custom rules, use the example below to create your custom
  ## rule, and remove the square brackts after 'customRules:'.
  ## e.g.:
  ## customRules:
  ## - host: example.com
  ##   http:
  ##     paths:
  ##     - path: /
  ##       pathType: Exact
  ##       backend:
  ##         service:
  ##           name: myServiceName
  ##           port:
  ##             number: 8080
  ##
  customRules: []
  ## @param {Object} ingress.customAnnotations - Custom annotations
  ##
  customAnnotations: {}


## @section Redis (chart) parameters

redis:
  ## @param {boolean} redis.chartEnabled - Enable/disable the Redis chart dependency
  ## This is required, unless you're running your own Redis instance
  ##
  chartEnabled: true
  ## @param {string} redis.fullnameOverride - Override the Redis chart name
  ##
  fullnameOverride: redis
