name: Lint and Test Charts

on: pull_request

jobs:
  lint-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up Helm
        uses: azure/setup-helm@v1
        with:
          version: v3.4.1

      # Python is required because `ct lint` runs Yamale (https://github.com/23andMe/Yamale) and
      # yamllint (https://github.com/adrienverge/yamllint) which require Python
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.7

      - name: Set up chart-testing
        uses: helm/chart-testing-action@v2.0.1
        with:
          version: v3.3.0

      - name: Run chart-testing (list-changed)
        id: list-changed
        run: |
          changed=$(ct list-changed --excluded-charts common --config ct.yaml)
          if [[ -n "$changed" ]]; then
            echo "::set-output name=changed::true"
          fi

      - name: Run chart-testing (lint)
        run: ct lint --config ct.yaml

      - name: Create kind cluster
        uses: helm/kind-action@v1.2.0
        if: steps.list-changed.outputs.changed == 'true'
        with:
          log_level: debug

      - name: Get GCR Credentials & copy to kind cluster
        env:
          HELM_CHARTS_GCP_SA_KEY: ${{ secrets.HELM_CHARTS_GCP_SA_KEY }}
        run: |
          # desired cluster name; default is "kind"
          KIND_CLUSTER_NAME="chart-testing"

          # create a temp file for the docker config
          echo "Creating temporary docker client config directory ..."
          DOCKER_CONFIG=$(mktemp -d)
          export DOCKER_CONFIG
          trap 'echo "Removing ${DOCKER_CONFIG}/*" && rm -rf ${DOCKER_CONFIG:?}' EXIT

          echo "Creating a temporary config.json"
          # This is to force the omission of credsStore, which is automatically
          # created on supported system. With credsStore missing, "docker login"
          # will store the password in the config.json file.
          # https://docs.docker.com/engine/reference/commandline/login/#credentials-store
          cat <<EOF >"${DOCKER_CONFIG}/config.json"
          {
           "auths": { "gcr.io": {} }
          }
          EOF
          # login to gcr in DOCKER_CONFIG using a service account
          # echo "Logging in to GCR in temporary docker client config directory ..."
          echo $HELM_CHARTS_GCP_SA_KEY | docker login -u _json_key --password-stdin https://gcr.io

          # setup credentials on each node
          echo "Moving credentials to kind cluster name='${KIND_CLUSTER_NAME}' nodes ..."
          for node in $(kind get nodes --name "${KIND_CLUSTER_NAME}"); do
            # the -oname format is kind/name (so node/name) we just want name
            node_name=${node#node/}
            # copy the config to where kubelet will look
            docker cp "${DOCKER_CONFIG}/config.json" "${node_name}:/var/lib/kubelet/config.json"
            # restart kubelet to pick up the config
            docker exec "${node_name}" systemctl restart kubelet.service
          done

          echo "Done!"

      - name: Run chart-testing (install)
        run: ct install --excluded-charts common --config ct.yaml
